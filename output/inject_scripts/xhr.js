(()=>{"use strict";var e=["load","loadend","timeout","error","readystatechange","abort"];function t(e,t){var n={};for(var r in e)n[r]=e[r];return n.target=n.currentTarget=t,n}var n,r=e[0],o=e[1],a=e[2],i=e[3],s=e[4],c=e[5];function u(e){return e.watcher||(e.watcher=document.createElement("a"))}function l(e,n){var r,o=e.getProxy(),a="on"+n+"_",i=t({type:n},o);o[a]&&o[a](i),"function"==typeof Event?r=new Event(n,{bubbles:!1}):(r=document.createEvent("Event")).initEvent(n,!1,!0),u(e).dispatchEvent(r)}function f(e){this.xhr=e,this.xhrProxy=e.getProxy()}function h(e){function t(e){f.call(this,e)}return t.prototype=Object.create(f.prototype),t.prototype.next=e,t}f.prototype=Object.create({resolve:function(e){var t=this.xhrProxy,n=this.xhr;t.readyState=4,n.resHeader=e.headers,t.response=t.responseText=e.response,t.statusText=e.statusText,t.status=e.status,l(n,s),l(n,r),l(n,o)},reject:function(e){this.xhrProxy.status=0,l(this.xhr,e.type),l(this.xhr,o)}});var d=h((function(e){var t=this.xhr;for(var n in e=e||t.config,t.withCredentials=e.withCredentials,t.open(e.method,e.url,!1!==e.async,e.user,e.password),e.headers)t.setRequestHeader(n,e.headers[n]);t.send(e.body)})),p=h((function(e){this.resolve(e)})),v=h((function(e){this.reject(e)}));function m(n,r){var o=n.onRequest,f=n.onResponse,h=n.onError;function m(){return!0}function y(e){return function(t,n){return function(e,t,n,r){var o=new v(e);n={config:e.config,error:n,type:r},h?h(n,o):o.next(n)}(t,0,n,e),!0}}function x(e,t){return 4===e.readyState&&0!==e.status?function(e,t){var n=new p(e),r={response:t.response,status:t.status,statusText:t.statusText,config:e.config,headers:e.resHeader||e.getAllResponseHeaders().split("\r\n").reduce((function(e,t){if(""===t)return e;var n=t.split(":");return e[n.shift()]=function(e){return e.replace(/^\s+|\s+$/g,"")}(n.join(":")),e}),{})};if(!f)return n.resolve(r);f(r,n)}(e,t):4!==e.readyState&&l(e,s),!0}return function(n,r){function o(e){return function(){var t=this.hasOwnProperty(e+"_")?this[e+"_"]:this.xhr[e],r=(n[e]||{}).getter;return r&&r(t,this)||t}}function a(e){return function(r){var o=this.xhr,a=this,i=n[e];if("on"===e.substring(0,2))a[e+"_"]=r,o[e]=function(i){i=t(i,a),n[e]&&n[e].call(a,o,i)||r.call(a,i)};else{var s=(i||{}).setter;r=s&&s(r,a)||r,this[e+"_"]=r;try{o[e]=r}catch(e){}}}}function i(e){return function(){var t=[].slice.call(arguments);if(n[e]){var r=n[e].call(this,t,this.xhr);if(r)return r}return this.xhr[e].apply(this.xhr,t)}}return(r=r||window)._rxhr=r._rxhr||r.XMLHttpRequest,r.XMLHttpRequest=function(){for(var t=new r._rxhr,n=0;n<e.length;++n)void 0===t[e[n]]&&(t[e[n]]=null);for(var s in t){var c="";try{c=typeof t[s]}catch(e){}"function"===c?this[s]=i(s):Object.defineProperty(this,s,{get:o(s),set:a(s),enumerable:!0})}var u=this;t.getProxy=function(){return u},this.xhr=t},Object.assign(r.XMLHttpRequest,{UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4}),r._rxhr}({onload:m,onloadend:m,onerror:y(i),ontimeout:y(a),onabort:y(c),onreadystatechange:function(e){return x(e,this)},open:function(e,t){var n=this,r=t.config={headers:{}};r.method=e[0],r.url=e[1],r.async=e[2],r.user=e[3],r.password=e[4],r.xhr=t;var a="on"+s;if(t[a]||(t[a]=function(){return x(t,n)}),o)return!0},send:function(e,t){var n=t.config;if(n.withCredentials=t.withCredentials,n.body=e[0],o){var r=function(){o(n,new d(t))};return!1===n.async?r():setTimeout(r),!0}},setRequestHeader:function(e,t){return t.config.headers[e[0].toLowerCase()]=e[1],!0},addEventListener:function(n,r){var o=this;if(-1!==e.indexOf(n[0])){var a=n[1];return u(r).addEventListener(n[0],(function(e){var r=t(e,o);r.type=n[0],r.isTrusted=!0,a.call(o,r)})),!0}},getAllResponseHeaders:function(e,t){var n=t.resHeader;if(n){var r="";for(var o in n)r+=o+": "+n[o]+"\r\n";return r}},getResponseHeader:function(e,t){var n=t.resHeader;if(n)return n[(e[0]||"").toLowerCase()]}},r)}var y=null;(y=document.createElement("div")).className="chrome-notification",document.body.appendChild(y);var x=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function s(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}c((r=r.apply(e,t||[])).next())}))},w=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},g=[];function b(e,t){return x(this,void 0,void 0,(function(){return w(this,(function(n){switch(n.label){case 0:switch(console.log(e),e.mode){case 0:return[3,1];case 1:return[3,2]}return[3,4];case 1:return[2,e.resJson];case 2:return[4,E(e,t)];case 3:return[2,n.sent()];case 4:return[2]}}))}))}function E(e,t){return x(this,void 0,void 0,(function(){return w(this,(function(n){switch(n.label){case 0:return[4,new Function(e.resScript)(t)];case 1:return[2,n.sent()]}}))}))}!function(e){if(n)throw"Proxy already exists";n=new m(e)}({onRequest:function(e,t){return x(void 0,void 0,void 0,(function(){var n,r,o,a,i,s,c;return w(this,(function(u){switch(u.label){case 0:localStorage.getItem("chrome_mock_ext_show_notification"),u.label=1;case 1:u.trys.push([1,6,7,8]),n=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(g),r=n.next(),u.label=2;case 2:return r.done?[3,5]:(o=r.value,new RegExp(o.regexpStr).test(e.url)?(function(e){var t=e.title,n=e.content,r=e.timeout,o=void 0===r?3e3:r,a=document.createElement("div");a.className="chrome-notification-panel";var i=document.createElement("div");i.className="chrome-notification-panel-title";var s=document.createElement("span");s.innerText=t;var c=document.createElement("i");function u(){c.removeEventListener("click",u);var e=a.clientWidth,t=0;requestAnimationFrame((function n(){t+=e/17,a.style.transform="translateX(".concat(t,"px)"),t<e+16?requestAnimationFrame(n):a.remove()}))}c.className="chrome-notification-panel-title-close",c.innerText="x",c.addEventListener("click",u);var l=document.createElement("div");l.className="chrome-notification-panel-content",l.innerHTML=n,i.appendChild(s),i.appendChild(c),a.appendChild(i),a.appendChild(l),y.appendChild(a);var f=a.clientWidth;a.style.transform="translateX(".concat(f+16,"px)");var h=f+16;requestAnimationFrame((function e(){h-=f/17,a.style.transform="translateX(".concat(h,"px)"),h>0&&requestAnimationFrame(e)})),setTimeout(u,o)}({title:"xhr_mock_ext拦截提醒",content:'/<span style="color:red">'.concat(o.regexpStr,"</span>/ ,已被拦截")}),[4,b(o,e)]):[3,4]);case 3:return a=u.sent(),console.log(a),[2,t.resolve({config:e,status:200,headers:{"content-type":"application/json;charset=UTF-8"},response:a})];case 4:return r=n.next(),[3,2];case 5:return[3,8];case 6:return i=u.sent(),s={error:i},[3,8];case 7:try{r&&!r.done&&(c=n.return)&&c.call(n)}finally{if(s)throw s.error}return[7];case 8:return t.next(e),[2]}}))}))}}),window.postMessage({event:"inject_get_matching",data:null}),window.addEventListener("message",(function(e){"inject_get_matching_res"===e.data.event&&(g=e.data.data)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,